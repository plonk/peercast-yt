# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Build for Ubuntu/Windows

on:
  push:
    branches: [ "**" ]
  pull_request:
    types:
      - opened

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-ubuntu:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    strategy:
        matrix:
          os:
            - ubuntu-24.04
            - ubuntu-24.04-arm
    runs-on:  ${{ matrix.os }}
    steps:
    - name: Install Libraries
      run: sudo apt-get install ninja-build libgtest-dev librtmp-dev

    - uses: actions/checkout@v4

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

    - name: CPack for tgz
      working-directory: ${{github.workspace}}/build
      run: cpack

    - name: CPack for deb
      working-directory: ${{github.workspace}}/build
      run: cpack -G DEB

    - name: Archive build results
      uses: actions/upload-artifact@v4
      with:
        name: build-result-${{ matrix.os }}
        path: |
            ${{github.workspace}}/build/*.tar.gz
            ${{github.workspace}}/build/*.deb

  build-windows-msys2-ucrt64:
      # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
      # You can convert this to a matrix build if you need cross-platform coverage.
      # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
      runs-on: windows-latest
      defaults:
        run:
          shell: msys2 {0}

      steps:
      - uses: actions/checkout@v4

      - uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
          install: >
            git
            ruby
            mingw-w64-ucrt-x86_64-gcc
            mingw-w64-ucrt-x86_64-cmake
            mingw-w64-ucrt-x86_64-gtest
            mingw-w64-ucrt-x86_64-openssl
            mingw-w64-ucrt-x86_64-rtmpdump

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B "${{github.workspace}}/build" -DCMAKE_BUILD_TYPE="${{env.BUILD_TYPE}}"

      - name: Build
        # Build your program with the given configuration
        run: cmake --build "${{github.workspace}}/build" --config ${{env.BUILD_TYPE}}

      - name: Test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}}

      - name: CPack
        working-directory: ${{github.workspace}}/build
        run: cpack

      - name: Archive build results
        uses: actions/upload-artifact@v4
        with:
          name: build-result-windows
          path:
              ${{github.workspace}}/build/*.zip
